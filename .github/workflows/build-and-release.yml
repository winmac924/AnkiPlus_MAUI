name: Build and Release AnkiPlus MAUI

on:
  push:
    tags:
      - 'v*'  # v1.0.0のようなタグでトリガー
  workflow_dispatch:  # 手動実行も可能

# GitHub Actionsの権限設定
permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-latest
    
    env:
      PROJECT_PATH: 'AnkiPlus_MAUI.csproj'
      
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: 🔐 Create appsettings.json from secrets
      run: |
        $appsettings = @{
          "Firebase" = @{
            "ApiKey" = "${{ secrets.FIREBASE_API_KEY }}"
            "AuthDomain" = "${{ secrets.FIREBASE_AUTH_DOMAIN }}"
          }
          "AzureStorage" = @{
            "ConnectionString" = "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}"
          }
        }
        $appsettings | ConvertTo-Json -Depth 3 | Out-File -FilePath "appsettings.json" -Encoding UTF8
        echo "✅ appsettings.json を作成しました"
      shell: powershell
      env:
        FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
        FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
        AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
    
    - name: 🔍 Extract Version from Tag
      id: get_version
      run: |
        if ("${{ github.ref_type }}" -eq "tag") {
          $version = "${{ github.ref_name }}" -replace "^v", ""
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "TAG_NAME=${{ github.ref_name }}" >> $env:GITHUB_OUTPUT
        } else {
          $version = "1.0.0-dev"
          $tag = "v1.0.0-dev"
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "TAG_NAME=$tag" >> $env:GITHUB_OUTPUT
        }
        echo "Building version: $version"
      shell: powershell
      
    - name: 🛠️ Restore Dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: 🏗️ Build Application
      run: |
        dotnet build ${{ env.PROJECT_PATH }} -c Release -f net9.0-windows10.0.19041.0 --no-restore
        
    - name: 📦 Publish Executable
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} -c Release -f net9.0-windows10.0.19041.0 -r win-x64 --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:ApplicationDisplayVersion=${{ steps.get_version.outputs.VERSION }}
        
    - name: 🔍 Debug List Files
      run: |
        echo "=== Listing all files in bin directory ==="
        Get-ChildItem -Path "bin" -Recurse | Select-Object FullName, Length
        echo "=== End of file listing ==="
      shell: powershell
      
    - name: 🔍 Find Executable Files
      id: find_exe
      run: |
        # 複数のパスパターンを試す
        $searchPaths = @(
          "bin/Release/net9.0-windows10.0.19041.0/win-x64/publish/",
          "bin\Release\net9.0-windows10.0.19041.0\win-x64\publish\",
          "bin/Release/net9.0-windows10.0.19041.0/win-x64/",
          "bin\Release\net9.0-windows10.0.19041.0\win-x64\"
        )
        
        $exeFound = $false
        foreach ($searchPath in $searchPaths) {
          if (Test-Path $searchPath) {
            echo "Searching in: $searchPath"
            $exeFiles = Get-ChildItem -Path $searchPath -Filter "*.exe" -Recurse -ErrorAction SilentlyContinue
            if ($exeFiles.Count -gt 0) {
              $exePath = $exeFiles[0].FullName
              $exeName = $exeFiles[0].Name
              
              # 相対パスに変換
              $relativePath = $exePath -replace [regex]::Escape($PWD.Path + "\"), ""
              $relativePath = $relativePath -replace "\\", "/"
              
              echo "EXE_PATH=$relativePath" >> $env:GITHUB_OUTPUT
              echo "EXE_NAME=$exeName" >> $env:GITHUB_OUTPUT
              echo "Found EXE: $exePath"
              echo "Relative path: $relativePath"
              
              # ファイルサイズを確認
              $fileSize = [math]::Round((Get-Item $exePath).Length / 1MB, 2)
              echo "EXE_SIZE=$fileSize MB" >> $env:GITHUB_OUTPUT
              echo "File size: $fileSize MB"
              
              $exeFound = $true
              break
            }
          }
        }
        
        if (-not $exeFound) {
          echo "❌ No EXE files found in any search path!"
          echo "Available files:"
          Get-ChildItem -Path "bin" -Recurse -Filter "*.exe" | Select-Object FullName
          exit 1
        }
      shell: powershell
      
    - name: 📝 Prepare Release Info
      id: release_info
      run: |
        # PowerShellの出力エンコーディングをUTF-8に設定
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        [Console]::InputEncoding = [System.Text.Encoding]::UTF8
        
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $fileSize = "${{ steps.find_exe.outputs.EXE_SIZE }}"
        
        # CHANGELOGから最新版の変更内容を読み込み（英語版を優先）
        $changelogContent = ""
        if (Test-Path "CHANGELOG.md") {
          try {
            # UTF-8でファイルを読み込み
            $content = [System.IO.File]::ReadAllText("CHANGELOG.md", [System.Text.Encoding]::UTF8)
            
            # まず英語版を試す
            if ($content -match "## Latest Changes \(English\)\s*\n(.*?)\n\s*---") {
              $changelogContent = $matches[1].Trim()
              Write-Host "English changelog content extracted successfully"
            }
            # 英語版がない場合、日本語版を試す
            elseif ($content -match "## 最新版の変更内容\s*\n(.*?)\n\s*## Latest Changes") {
              $changelogContent = $matches[1].Trim()
              Write-Host "Japanese changelog content extracted successfully"
            }
          } catch {
            Write-Host "Error reading CHANGELOG.md: $_"
          }
        }
        
        # デフォルトの変更内容（CHANGELOGが読み込めない場合）
        if ([string]::IsNullOrWhiteSpace($changelogContent)) {
          $changelogContent = "- Performance improvements`n- Bug fixes`n- UI/UX enhancements"
        }
        
        # GitHub Outputに各要素を設定（英語でフォールバック）
        echo "VERSION_INFO=$version" >> $env:GITHUB_OUTPUT
        echo "FILE_SIZE_INFO=$fileSize" >> $env:GITHUB_OUTPUT
        
        # CHANGELOGの内容を一時ファイルに保存してから読み込み
        $tempFile = [System.IO.Path]::GetTempFileName()
        [System.IO.File]::WriteAllText($tempFile, $changelogContent, [System.Text.Encoding]::UTF8)
        $encodedContent = [System.IO.File]::ReadAllText($tempFile, [System.Text.Encoding]::UTF8)
        echo "CHANGELOG_CONTENT=$encodedContent" >> $env:GITHUB_OUTPUT
        Remove-Item $tempFile -Force
      shell: powershell
    
    - name: 🏷️ Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_version.outputs.TAG_NAME }}
        name: AnkiPlus MAUI ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## 🚀 AnkiPlus MAUI ${{ steps.release_info.outputs.VERSION_INFO }}

          
          ### 🔄 アップデート
          - アプリ内自動アップデート機能により、新しいバージョンが自動検出されます
          - 手動でダウンロードして既存のファイルを置き換えてください
          
          ### 📋 変更内容
          ${{ steps.release_info.outputs.CHANGELOG_CONTENT }}
          
          ### 🔧 システム要件
          - Windows 11(バージョン 24H2 以降)　（その他のバージョンでの動作は保証しません）
          - ファイルサイズ: 約 ${{ steps.release_info.outputs.FILE_SIZE_INFO }}
          
          ---
        files: ${{ steps.find_exe.outputs.EXE_PATH }}
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'dev') || contains(steps.get_version.outputs.VERSION, 'alpha') || contains(steps.get_version.outputs.VERSION, 'beta') }}
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: ✅ Build Summary
      run: |
        echo "## 🎉 ビルド完了!" >> $GITHUB_STEP_SUMMARY
        echo "- **バージョン**: ${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **タグ**: ${{ steps.get_version.outputs.TAG_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **実行ファイル**: ${{ steps.find_exe.outputs.EXE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ファイルサイズ**: ${{ steps.find_exe.outputs.EXE_SIZE }}" >> $GITHUB_STEP_SUMMARY
        echo "- **リリースURL**: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.TAG_NAME }}" >> $GITHUB_STEP_SUMMARY 